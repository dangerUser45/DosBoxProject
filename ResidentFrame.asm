 .model tiny
 .code
  locals @@
  org 100h

 Start: jmp MAIN_RESIDENT_FRAME
;--------------------------------------------------------------------------------------------------------
;////////------CONSTANTS-------//////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    VIDEOMEM_SEGMENT        equ     0b800h      ;| - адрес начала видеопамяти
    WIDTH_FRAME             equ     014d        ;| - ширина рамки
    LENGTH_FRAME            equ     015d        ;| - высота рамки
    COLOR_FRAME             equ     04eh        ;| - цвет рамки
    CODE_JUMP               equ     0eah        ;| - команда jmp в hex формате
    ASCII_CARRIAGE_RETURN   equ     0dh         ;| - ASCII-код символа возврата каретки
    WIDTH_DISPLAY           equ     080d        ;| - ширина дисплея (в знакоместах)
    LENGTH_DISPLAY          equ     025d        ;| - высота дисплея (в знакоместах)
    BYTE_WIDTH_DISPLAY      equ     0160d       ;| - ширина дисплея (в байтах)
    BIAS_FRAME              equ     0438d       ;| - смещение относительно начала видеопамяти (в байтах)
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
 STYLES:
        db 0c9h, 0cdh, 0bbh
        db 0bah, 0h,   0bah     ; Double frame
        db 0c8h, 0cdh, 0bch

;--------------------------------------------------------------------------------------------------------
;////////------MACRO-------//////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    FINISHED_PROCESSING_SYMBOL macro
        in al, 61h
        or al, 10000000b
        out 61h, al
        xor al, al
        out 61h, al
    endm
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    START_NEW_INT_09h proc

        nop
        nop
        nop

        push ax
        push bx
        push cx
        push dx
        push si
        push di
        ;push bp
        ;push sp
        push ds
        push es
        ;push ss
        

        
        call DRAW_RESIDENT_FRAME

        ;FINISHED_PROCESSING_SYMBOL

        ;mov al, 20h
        ;out 20h, al

        ;pop ss 
        pop es 
        pop ds 
        ;pop sp 
        ;pop bp 
        pop di 
        pop si 
        pop dx
        pop cx
        pop bx
        pop ax

        nop
        nop
        nop

        db CODE_JUMP

 ORIGINAL_OFFSET_INT_09h:  dw 0
 ORIGINAL_SEGMENT_INT_09h: dw 0

        iret
 endp 
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    DRAW_RESIDENT_FRAME proc 

    mov dx, VIDEOMEM_SEGMENT   ;\ <=> es = 0b800h
    mov es, dx       ;/ 

    mov ah, COLOR_FRAME                           ;\ - цвет рамки           \   
    mov cx, 3;WIDTH_FRAME                     ;| - длина рмки           |
    mov dx, 3;LENGTH_FRAME                    ;| - высота рамки         | -  подготавливаю регистры для рисования рамки
    mov di, BIAS_FRAME                      ;| - записываю смещение   |
                                            ;/   для распечатки рамки /


    sub cx, 2        ;| - подготовка регистра cx как счётчика для DRAW_LINE
    sub dx, 2        ;| - подготовка регистра dx как счётчика для DRAW_FRAME_CYCLE
    lea si, STYLES   ;| - родготовка si для ф-ци draw line

    call DRAW_FRAMES

    ret
 endp
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    DRAW_FRAMES proc

           push di                           ;\
           push cx                           ;|
           call DRAW_LINE                    ;| - print first line
           pop cx                            ;|
           pop di                            ;|
           add di, BYTE_WIDTH_DISPLAY        ;/
        
        @@DRAW_FRAME_CYCLE:
           push cx
           push di
           call DRAW_LINE
           pop di
           add di, BYTE_WIDTH_DISPLAY
           pop cx
           sub si, 3
           dec dx
           cmp dx, 0h
           jne @@DRAW_FRAME_CYCLE

           add si, 3       ;\ - print last line
           call DRAW_LINE  ;/

           ret
    endp
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    DRAW_LINE proc

           lodsb            ;| <=> mov al, ds:[si]  ;\ - print first symbol
           stosw                                    ;/

        @@DRAW_LINE_CYCLE:
           lodsb            ;| <=>  mov es[di], ax   add di, 2
           stosw
           dec si
           loop @@DRAW_LINE_CYCLE

           inc si
           lodsb            ;\ - print last symbol
           stosw            ;/

           ret
    endp
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    MY_STRLEN proc

; MY_STRLEN counts the number of characters in the string until it reaches the '$' character
; ENTRY: None
; EXIT:  CX - result
; DESTR: AL, DI, CX

            mov al, 0dh     ;| ASCII код возврата каретки
            mov bx, ds
            mov es, bx
            xor cx, cx
            dec cx
            mov dx, di
            repne scasb
            mov di, dx
            neg cx
            sub cx, 2
            ret
    endp
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    ;sinclude fndrfram.asm

    END_NEW_INT_09h:
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
    MAIN_RESIDENT_FRAME:

        xor ax, ax
        mov es, ax
        mov bx, 08h*4

        mov ax, es:[bx]
        mov word ptr ORIGINAL_OFFSET_INT_09h, ax
        mov ax, es:[bx + 2]
        mov word ptr ORIGINAL_SEGMENT_INT_09h, ax

        ;int 09h

        cli
        mov es:[bx], offset START_NEW_INT_09h
        push cs
        pop ax
        mov es:[bx + 2], ax
        sti

        ;call DRAW_RESIDENT_FRAME
        int 08h

        mov ah, 31h
        mov dx, offset END_NEW_INT_09h
        shr dx, 4
        inc dx
        int 21h
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
 end     Start
;--------------------------------------------------------------------------------------------------------
;////////////////////////////////////////////////////////////////////////////////////////////////////////
;--------------------------------------------------------------------------------------------------------
